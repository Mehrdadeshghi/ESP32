// ESP File with Wifi WAP and web Reset Factory and LED 

#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiManager.h>       // Für WLAN-Konfiguration
#include <HTTPClient.h>        // Für HTTP-Anfragen
#include <WebServer.h>         // Für den Webserver
#include <ArduinoJson.h>       // Für JSON-Verarbeitung

// Debugging-Level für WiFiManager aktivieren
#define WM_DEBUG_LEVEL DEBUG_VERBOSE

// GPIO-Pins
const int pirSensorPin = 13;   // GPIO-Pin des PIR-Sensors
const int ledPin = 2;          // GPIO-Pin der LED (eingebaute LED auf vielen ESP32-Boards)

// Server-URLs (anpassen)
const char* registrationServerUrl = "http://dein-server.de/api/register";
const char* motionServerUrl = "http://dein-server.de/api/motion";

// Firmware-Version
const char* firmwareVersion = "1.0.0";  // Aktuelle Firmware-Version

// Variable zur Speicherung, ob das Gerät registriert wurde
bool isRegistered = false;

// WiFiManager-Objekt
WiFiManager wm;

// WebServer-Objekt auf Port 80
WebServer server(80);

// Funktionsdeklarationen
void registerDevice();
void sendMotionEvent();
String getTimestamp();
void blinkLED();
void startWebServer();
void handleRoot();
void handleFactoryReset();

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("\nStarte ESP32-Gerät...");

  // Pins initialisieren
  pinMode(pirSensorPin, INPUT);
  pinMode(ledPin, OUTPUT);

  // LED initial ausschalten
  digitalWrite(ledPin, LOW);

  // WiFiManager konfigurieren
  wm.setDebugOutput(true);  // WiFiManager-Debugging aktivieren
  wm.setMinimumSignalQuality(20); // Nur Netzwerke mit mindestens 20% Signalstärke anzeigen
  wm.setConfigPortalTimeout(180); // Nach 3 Minuten ohne Eingabe neu starten

  // Sicherstellen, dass die WLAN-Einstellungen nicht bei jedem Start zurückgesetzt werden
  // Stelle sicher, dass die folgende Zeile auskommentiert oder entfernt ist:
  // wm.resetSettings();

  // Versuche, eine Verbindung mit gespeicherten WLAN-Daten herzustellen
  if (!wm.autoConnect("SmartBriefkasten_AP")) {
    Serial.println("Verbindung fehlgeschlagen oder Zeitüberschreitung");
    // Neustart oder alternative Aktionen können hier durchgeführt werden
    ESP.restart();
  }

  // Wenn wir hier ankommen, sind wir mit dem WLAN verbunden
  Serial.println("WLAN-Verbindung hergestellt!");
  Serial.print("IP-Adresse: ");
  Serial.println(WiFi.localIP());

  // LED dauerhaft einschalten
  digitalWrite(ledPin, HIGH);

  // Starte den Webserver
  startWebServer();

  // Gerät registrieren
  registerDevice();
}

void loop() {
  // Webserver bearbeiten
  server.handleClient();

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WLAN-Verbindung verloren, versuche erneut zu verbinden...");

    // LED blinken lassen
    blinkLED();

    // Versuche, erneut zu verbinden
    if (wm.autoConnect("SmartBriefkasten_AP")) {
      Serial.println("Wieder mit WLAN verbunden");

      // LED dauerhaft einschalten
      digitalWrite(ledPin, HIGH);

      // Gerät erneut registrieren
      registerDevice();
    } else {
      Serial.println("Erneute Verbindung fehlgeschlagen");
    }
  }

  if (!isRegistered) {
    // Versuche erneut, das Gerät zu registrieren
    registerDevice();
  } else {
    // Bewegungen überwachen
    int pirStatus = digitalRead(pirSensorPin);

    if (pirStatus == HIGH) {
      Serial.println("Bewegung erkannt!");
      sendMotionEvent();

      // Wartezeit, um Mehrfachauslösungen zu vermeiden
      delay(5000);
    }
  }

  // Kurze Pause, um die CPU zu entlasten
  delay(100);
}

// Funktion zum Starten des Webservers
void startWebServer() {
  server.on("/", handleRoot);
  server.on("/factoryreset", handleFactoryReset);
  server.begin();
  Serial.println("Webserver gestartet");
}

// Funktion zum Verarbeiten von Anfragen an die Wurzeladresse
void handleRoot() {
  // Systeminformationen sammeln
  String ipAddress = WiFi.localIP().toString();
  String macAddress = WiFi.macAddress();
  int32_t rssi = WiFi.RSSI();

  String html = "<!DOCTYPE html><html><head><title>ESP32 Systeminfo</title></head><body>";
  html += "<h1>ESP32 Systeminformationen</h1>";
  html += "<p><strong>IP-Adresse:</strong> " + ipAddress + "</p>";
  html += "<p><strong>MAC-Adresse:</strong> " + macAddress + "</p>";
  html += "<p><strong>Signalstärke (RSSI):</strong> " + String(rssi) + " dBm</p>";
  html += "<p><strong>Firmware-Version:</strong> " + String(firmwareVersion) + "</p>";
  html += "<form action=\"/factoryreset\" method=\"POST\">";
  html += "<button type=\"submit\">Factory Reset</button>";
  html += "</form>";
  html += "</body></html>";

  server.send(200, "text/html", html);
}

// Funktion zum Verarbeiten des Factory Reset
void handleFactoryReset() {
  Serial.println("Factory Reset wird ausgeführt...");

  // WLAN-Einstellungen zurücksetzen
  wm.resetSettings();

  // Antwort an den Client senden
  server.send(200, "text/html", "<h1>Factory Reset ausgeführt. Gerät startet neu...</h1>");

  delay(2000); // Kurze Pause, um sicherzustellen, dass die Antwort gesendet wird

  // Neustart des ESP32
  ESP.restart();
}

// Funktion zur Registrierung des Geräts beim Server
void registerDevice() {
  wl_status_t wifiStatus = WiFi.status();
  Serial.print("WiFi-Status: ");
  Serial.println(wifiStatus);

  if (wifiStatus == WL_CONNECTED) {
    HTTPClient http;
    http.begin(registrationServerUrl);
    http.addHeader("Content-Type", "application/json");

    // Geräteinformationen sammeln
    String macAddress = WiFi.macAddress();

    // JSON-Dokument erstellen
    DynamicJsonDocument doc(256);
    doc["mac_address"] = macAddress;
    doc["firmware_version"] = firmwareVersion;

    String requestBody;
    serializeJson(doc, requestBody);

    // HTTP POST-Anfrage senden
    int httpResponseCode = http.POST(requestBody);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Antwort vom Server:");
      Serial.println(response);

      // Antwort verarbeiten
      DynamicJsonDocument responseDoc(256);
      DeserializationError error = deserializeJson(responseDoc, response);

      if (!error) {
        bool success = responseDoc["success"];
        if (success) {
          Serial.println("Gerät erfolgreich registriert.");
          isRegistered = true;
        } else {
          Serial.println("Registrierung fehlgeschlagen.");
        }
      } else {
        Serial.println("Fehler beim Parsen der Serverantwort.");
      }
    } else {
      Serial.print("Fehler bei der HTTP-Anfrage: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("Nicht mit WLAN verbunden.");
  }
}

// Funktion zum Senden einer Bewegungsmeldung
void sendMotionEvent() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(motionServerUrl);
    http.addHeader("Content-Type", "application/json");

    // Daten sammeln
    String macAddress = WiFi.macAddress();

    // JSON-Dokument erstellen
    DynamicJsonDocument doc(256);
    doc["mac_address"] = macAddress;
    doc["timestamp"] = getTimestamp();  // Zeitstempel-Funktion

    String requestBody;
    serializeJson(doc, requestBody);

    // HTTP POST-Anfrage senden
    int httpResponseCode = http.POST(requestBody);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Bewegungsmeldung gesendet:");
      Serial.println(response);
    } else {
      Serial.print("Fehler bei der Bewegungsmeldung: ");
      Serial.println(httpResponseCode);
    }

    http.end();
  } else {
    Serial.println("Nicht mit WLAN verbunden.");
  }
}

// Funktion zum Abrufen eines Zeitstempels
String getTimestamp() {
  // Hier solltest du die echte Uhrzeit verwenden, z.B. durch NTP
  // Für dieses Beispiel verwenden wir millis()
  unsigned long millisTime = millis();
  return String(millisTime);
}

// Funktion, um die LED blinken zu lassen
void blinkLED() {
  static unsigned long previousMillis = 0;
  const long interval = 500;  // Blinkintervall in Millisekunden
  static bool ledState = false;

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    ledState = !ledState;
    digitalWrite(ledPin, ledState ? HIGH : LOW);
  }
}
