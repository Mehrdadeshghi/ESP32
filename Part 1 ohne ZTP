Complete Setup for Device Registration and Motion Detection
1. ESP32 Code:
The ESP32 code should handle both:

Registering the device with the server.
Sending motion events to the server when motion is detected by the PIR sensor.
Here’s the complete ESP32 code that handles both functionalities:

cpp
Code kopieren
#include <WiFi.h>
#include <HTTPClient.h>
#include <WiFiManager.h>
#include <ArduinoJson.h>

// Your WiFi credentials
const char* ssid = "your_wifi_ssid";       
const char* password = "your_wifi_password";

// Server URLs
const char* registrationServerUrl = "http://45.195.250.247:3000/api/register";
const char* motionServerUrl = "http://45.195.250.247:3000/api/motion";

// GPIO pins
const int pirSensorPin = 13;   // PIR sensor pin
const int ledPin = 2;          // LED pin (on-board)

// Variable to track device registration
bool isRegistered = false;

void setup() {
  Serial.begin(115200);
  
  // Initialize pins
  pinMode(pirSensorPin, INPUT);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // LED off initially

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Register the device after successful WiFi connection
  registerDevice();
}

void loop() {
  if (!isRegistered) {
    // Retry device registration if it's not yet registered
    registerDevice();
  } else {
    // Monitor for motion detection
    int pirStatus = digitalRead(pirSensorPin);
    if (pirStatus == HIGH) {
      Serial.println("Motion detected!");
      sendMotionEvent();  // Send the motion event to the server

      // Blink LED as a visual indication of motion detection
      digitalWrite(ledPin, HIGH);
      delay(5000);  // Wait 5 seconds to avoid repeated triggers
      digitalWrite(ledPin, LOW);
    }
  }

  delay(100);  // Small delay to reduce CPU load
}

// Function to register the device
void registerDevice() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(registrationServerUrl);  // URL for device registration
    http.addHeader("Content-Type", "application/json");

    // Create JSON payload for registration
    DynamicJsonDocument doc(256);
    doc["mac_address"] = WiFi.macAddress();
    doc["firmware_version"] = "1.0.0";  // Change this if necessary

    String requestBody;
    serializeJson(doc, requestBody);

    // Send HTTP POST request for registration
    int httpResponseCode = http.POST(requestBody);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Server response:");
      Serial.println(response);

      // Parse the JSON response from the server
      DynamicJsonDocument responseDoc(256);
      DeserializationError error = deserializeJson(responseDoc, response);

      if (!error) {
        bool success = responseDoc["success"];
        if (success) {
          Serial.println("Device successfully registered.");
          isRegistered = true;
        } else {
          Serial.println("Device registration failed.");
        }
      } else {
        Serial.print("Error parsing server response: ");
        Serial.println(error.c_str());
      }
    } else {
      Serial.print("HTTP request failed with code: ");
      Serial.println(httpResponseCode);
    }

    http.end();  // Close connection
  } else {
    Serial.println("Not connected to WiFi.");
  }
}

// Function to send motion detection event
void sendMotionEvent() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(motionServerUrl);  // URL for motion event
    http.addHeader("Content-Type", "application/json");

    // Create JSON payload for motion event
    DynamicJsonDocument doc(256);
    doc["mac_address"] = WiFi.macAddress();
    doc["timestamp"] = millis();  // Use millis() as a simple timestamp

    String requestBody;
    serializeJson(doc, requestBody);

    // Send HTTP POST request for motion event
    int httpResponseCode = http.POST(requestBody);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Motion event sent. Server response:");
      Serial.println(response);
    } else {
      Serial.print("Failed to send motion event. HTTP response code: ");
      Serial.println(httpResponseCode);
    }

    http.end();  // Close connection
  } else {
    Serial.println("Not connected to WiFi.");
  }
}
Key ESP32 Code Functionality:
Device Registration: It tries to register the ESP32 device with the server using the MAC address and firmware version.
Motion Detection: When motion is detected by the PIR sensor, a motion event is sent to the server along with a timestamp.
2. Node.js Server Code:
This server handles both:

Device Registration (/api/register)
Motion Event Logging (/api/motion)
Here’s the complete Node.js server code:

server.js
javascript
Code kopieren
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql');

// Initialize the Express app
const app = express();

// Middleware to parse incoming JSON requests
app.use(bodyParser.json());

// MySQL Database Connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'esp_user',            // Use your MySQL username
  password: 'esp_password',    // Use your MySQL password
  database: 'esp_data'         // The database for storing device data
});

db.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL database:', err);
    return;
  }
  console.log('Connected to MySQL database.');
});

// Endpoint for device registration
app.post('/api/register', (req, res) => {
  const { mac_address, firmware_version } = req.body;
  const sql = 'INSERT INTO devices (mac_address, firmware_version) VALUES (?, ?) ON DUPLICATE KEY UPDATE firmware_version=?';

  db.query(sql, [mac_address, firmware_version, firmware_version], (err, result) => {
    if (err) {
      console.error('Error registering device:', err);
      return res.status(500).json({ success: false, message: 'Error registering device' });
    }
    console.log(`Device registered: ${mac_address}`);
    res.json({ success: true, message: 'Device registered successfully' });
  });
});

// Endpoint for logging motion events
app.post('/api/motion', (req, res) => {
  const { mac_address, timestamp } = req.body;
  const sql = 'INSERT INTO motion_events (mac_address, timestamp) VALUES (?, ?)';

  db.query(sql, [mac_address, timestamp], (err, result) => {
    if (err) {
      console.error('Error logging motion event:', err);
      return res.status(500).json({ success: false, message: 'Error logging motion event' });
    }
    console.log(`Motion event recorded for device ${mac_address}`);
    res.json({ success: true, message: 'Motion event logged successfully' });
  });
});

// Start the server
const port = 3000;
app.listen(port, '0.0.0.0', () => {
  console.log(`Server running on http://45.195.250.247:${port}`);
});
Key Node.js Server Functionality:
Device Registration Endpoint (/api/register): Receives POST requests with the MAC address and firmware version to register the device.
Motion Event Endpoint (/api/motion): Receives POST requests with the MAC address and timestamp to log motion events.
3. Database Setup (MySQL):
Ensure your MySQL database has two tables: one for storing device registrations and another for motion events.

Run these SQL commands to set up the database and tables:

sql
Code kopieren
CREATE DATABASE esp_data;

USE esp_data;

-- Table for storing registered devices
CREATE TABLE devices (
  id INT AUTO_INCREMENT PRIMARY KEY,
  mac_address VARCHAR(17) UNIQUE NOT NULL,
  firmware_version VARCHAR(10) NOT NULL,
  registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for storing motion detection events
CREATE TABLE motion_events (
  id INT AUTO_INCREMENT PRIMARY KEY,
  mac_address VARCHAR(17) NOT NULL,
  timestamp VARCHAR(50) NOT NULL,
  event_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (mac_address) REFERENCES devices(mac_address)
);
4. Test the System:
ESP32:

Upload the code to the ESP32.
Check the Serial Monitor to see if the device registers with the server and sends motion detection events.
Server:

Start the Node.js server by running:
bash
Code kopieren
node server.js
Ensure the server is correctly receiving requests by watching the logs.
Use curl to manually test the endpoints:
bash
Code kopieren
curl -X POST http://45.195.250.247:3000/api/register -H "Content-Type: application/json" -d '{"mac_address": "AA:BB:CC:DD:EE:FF", "firmware_version": "1.0.0"}'

curl -X POST http://45.195.250.247:3000/api/motion -H "Content-Type: application/json" -d '{"mac_address": "AA:BB:CC:DD:EE:FF", "timestamp": "1695408910000"}'
Let me know if you have any further issues or need additional help! This setup should now properly handle both device registration and motion detection for your ESP32 project.
